{
  
    
        "post0": {
            "title": "Part of Speech Tagging with Hidden Markov Models",
            "content": "Introduction . Part of speech tagging is the process of determining the syntactic category of a word from the words in its surrounding context. It is often used to help disambiguate natural language phrases because it can be done quickly with high accuracy. Tagging can be used for many NLP tasks like determining correct pronunciation during speech synthesis (for example, dis-count as a noun vs dis-count as a verb), for information retrieval, and for word sense disambiguation. . In this notebook, we&#39;ll use the Pomegranate library to build a hidden Markov model for part of speech tagging using a &quot;universal&quot; tagset. Hidden Markov models have been able to achieve &gt;96% tag accuracy with larger tagsets on realistic text corpora. Hidden Markov models have also been used for speech recognition and speech generation, machine translation, gene recognition for bioinformatics, and human gesture recognition for computer vision, and more. . The Road Ahead . Step 1: Review the provided interface to load and access the text corpus | Step 2: Build a Most Frequent Class tagger to use as a baseline | Step 3: Build an HMM Part of Speech tagger and compare to the MFC baseline | Step 4: (Optional) Improve the HMM tagger | . # Jupyter &quot;magic methods&quot; -- only need to be run once per kernel restart %load_ext autoreload %aimport helpers, tests %autoreload 1 . # import python modules -- this cell needs to be run again if you make changes to any of the files import matplotlib.pyplot as plt import numpy as np from IPython.core.display import HTML from itertools import chain from collections import Counter, defaultdict from helpers import show_model, Dataset from pomegranate import State, HiddenMarkovModel, DiscreteDistribution . Step 1: Read and preprocess the dataset . We&#39;ll start by reading in a text corpus and splitting it into a training and testing dataset. The data set is a copy of the Brown corpus (originally from the NLTK library) that has already been pre-processed to only include the universal tagset. . The Dataset class provided in helpers.py will read and parse the corpus. The dataset is stored in plaintext as a collection of words and corresponding tags. Each sentence starts with a unique identifier on the first line, followed by one tab-separated word/tag pair on each following line. Sentences are separated by a single blank line. . Example from the Brown corpus. . b100-38532 Perhaps ADV it PRON was VERB right ADJ ; . ; . b100-35577 ... . data = Dataset(&quot;tags-universal.txt&quot;, &quot;brown-universal.txt&quot;, train_test_split=0.8) print(&quot;There are {} sentences in the corpus.&quot;.format(len(data))) print(&quot;There are {} sentences in the training set.&quot;.format(len(data.training_set))) print(&quot;There are {} sentences in the testing set.&quot;.format(len(data.testing_set))) assert len(data) == len(data.training_set) + len(data.testing_set), &quot;The number of sentences in the training set + testing set should sum to the number of sentences in the corpus&quot; . There are 57340 sentences in the corpus. There are 45872 sentences in the training set. There are 11468 sentences in the testing set. . The Dataset Interface . You can access (mostly) immutable references to the dataset through a simple interface provided through the Dataset class, which represents an iterable collection of sentences along with easy access to partitions of the data for training &amp; testing. Review the reference below, then run and review the next few cells to make sure you understand the interface before moving on to the next step. . Dataset-only Attributes: training_set - reference to a Subset object containing the samples for training testing_set - reference to a Subset object containing the samples for testing Dataset &amp; Subset Attributes: sentences - a dictionary with an entry {sentence_key: Sentence()} for each sentence in the corpus keys - an immutable ordered (not sorted) collection of the sentence_keys for the corpus vocab - an immutable collection of the unique words in the corpus tagset - an immutable collection of the unique tags in the corpus X - returns an array of words grouped by sentences ((w11, w12, w13, ...), (w21, w22, w23, ...), ...) Y - returns an array of tags grouped by sentences ((t11, t12, t13, ...), (t21, t22, t23, ...), ...) N - returns the number of distinct samples (individual words or tags) in the dataset Methods: stream() - returns an flat iterable over all (word, tag) pairs across all sentences in the corpus __iter__() - returns an iterable over the data as (sentence_key, Sentence()) pairs __len__() - returns the nubmer of sentences in the dataset . For example, consider a Subset, subset, of the sentences {&quot;s0&quot;: Sentence((&quot;See&quot;, &quot;Spot&quot;, &quot;run&quot;), (&quot;VERB&quot;, &quot;NOUN&quot;, &quot;VERB&quot;)), &quot;s1&quot;: Sentence((&quot;Spot&quot;, &quot;ran&quot;), (&quot;NOUN&quot;, &quot;VERB&quot;))}. The subset will have these attributes: . subset.keys == {&quot;s1&quot;, &quot;s0&quot;} # unordered subset.vocab == {&quot;See&quot;, &quot;run&quot;, &quot;ran&quot;, &quot;Spot&quot;} # unordered subset.tagset == {&quot;VERB&quot;, &quot;NOUN&quot;} # unordered subset.X == ((&quot;Spot&quot;, &quot;ran&quot;), (&quot;See&quot;, &quot;Spot&quot;, &quot;run&quot;)) # order matches .keys subset.Y == ((&quot;NOUN&quot;, &quot;VERB&quot;), (&quot;VERB&quot;, &quot;NOUN&quot;, &quot;VERB&quot;)) # order matches .keys subset.N == 7 # there are a total of seven observations over all sentences len(subset) == 2 # because there are two sentences . Sentences . Dataset.sentences is a dictionary of all sentences in the training corpus, each keyed to a unique sentence identifier. Each Sentence is itself an object with two attributes: a tuple of the words in the sentence named words and a tuple of the tag corresponding to each word named tags. . key = &#39;b100-38532&#39; print(&quot;Sentence: {}&quot;.format(key)) print(&quot;words: n t{!s}&quot;.format(data.sentences[key].words)) print(&quot;tags: n t{!s}&quot;.format(data.sentences[key].tags)) . Sentence: b100-38532 words: (&#39;Perhaps&#39;, &#39;it&#39;, &#39;was&#39;, &#39;right&#39;, &#39;;&#39;, &#39;;&#39;) tags: (&#39;ADV&#39;, &#39;PRON&#39;, &#39;VERB&#39;, &#39;ADJ&#39;, &#39;.&#39;, &#39;.&#39;) . Counting Unique Elements . You can access the list of unique words (the dataset vocabulary) via Dataset.vocab and the unique list of tags via Dataset.tagset. . print(&quot;There are a total of {} samples of {} unique words in the corpus.&quot; .format(data.N, len(data.vocab))) print(&quot;There are {} samples of {} unique words in the training set.&quot; .format(data.training_set.N, len(data.training_set.vocab))) print(&quot;There are {} samples of {} unique words in the testing set.&quot; .format(data.testing_set.N, len(data.testing_set.vocab))) print(&quot;There are {} words in the test set that are missing in the training set.&quot; .format(len(data.testing_set.vocab - data.training_set.vocab))) assert data.N == data.training_set.N + data.testing_set.N, &quot;The number of training + test samples should sum to the total number of samples&quot; . There are a total of 1161192 samples of 56057 unique words in the corpus. There are 928458 samples of 50536 unique words in the training set. There are 232734 samples of 25112 unique words in the testing set. There are 5521 words in the test set that are missing in the training set. . Accessing word and tag Sequences . The Dataset.X and Dataset.Y attributes provide access to ordered collections of matching word and tag sequences for each sentence in the dataset. . # accessing words with Dataset.X and tags with Dataset.Y for i in range(2): print(&quot;Sentence {}:&quot;.format(i + 1), data.X[i]) print() print(&quot;Labels {}:&quot;.format(i + 1), data.Y[i]) print() . Sentence 1: (&#39;Mr.&#39;, &#39;Podger&#39;, &#39;had&#39;, &#39;thanked&#39;, &#39;him&#39;, &#39;gravely&#39;, &#39;,&#39;, &#39;and&#39;, &#39;now&#39;, &#39;he&#39;, &#39;made&#39;, &#39;use&#39;, &#39;of&#39;, &#39;the&#39;, &#39;advice&#39;, &#39;.&#39;) Labels 1: (&#39;NOUN&#39;, &#39;NOUN&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;PRON&#39;, &#39;ADV&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;ADV&#39;, &#39;PRON&#39;, &#39;VERB&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;.&#39;) Sentence 2: (&#39;But&#39;, &#39;there&#39;, &#39;seemed&#39;, &#39;to&#39;, &#39;be&#39;, &#39;some&#39;, &#39;difference&#39;, &#39;of&#39;, &#39;opinion&#39;, &#39;as&#39;, &#39;to&#39;, &#39;how&#39;, &#39;far&#39;, &#39;the&#39;, &#39;board&#39;, &#39;should&#39;, &#39;go&#39;, &#39;,&#39;, &#39;and&#39;, &#39;whose&#39;, &#39;advice&#39;, &#39;it&#39;, &#39;should&#39;, &#39;follow&#39;, &#39;.&#39;) Labels 2: (&#39;CONJ&#39;, &#39;PRT&#39;, &#39;VERB&#39;, &#39;PRT&#39;, &#39;VERB&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;ADP&#39;, &#39;ADV&#39;, &#39;ADV&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;PRON&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;.&#39;) . Accessing (word, tag) Samples . The Dataset.stream() method returns an iterator that chains together every pair of (word, tag) entries across all sentences in the entire corpus. . # use Dataset.stream() (word, tag) samples for the entire corpus print(&quot; nStream (word, tag) pairs: n&quot;) for i, pair in enumerate(data.stream()): print(&quot; t&quot;, pair) if i &gt; 5: break . Stream (word, tag) pairs: (&#39;Mr.&#39;, &#39;NOUN&#39;) (&#39;Podger&#39;, &#39;NOUN&#39;) (&#39;had&#39;, &#39;VERB&#39;) (&#39;thanked&#39;, &#39;VERB&#39;) (&#39;him&#39;, &#39;PRON&#39;) (&#39;gravely&#39;, &#39;ADV&#39;) (&#39;,&#39;, &#39;.&#39;) . For both our baseline tagger and the HMM model we&#39;ll build, we need to estimate the frequency of tags &amp; words from the frequency counts of observations in the training corpus. In the next several cells you will complete functions to compute the counts of several sets of counts. . Step 2: Build a Most Frequent Class tagger . Perhaps the simplest tagger (and a good baseline for tagger performance) is to simply choose the tag most frequently assigned to each word. This &quot;most frequent class&quot; tagger inspects each observed word in the sequence and assigns it the label that was most often assigned to that word in the corpus. . IMPLEMENTATION: Pair Counts . Complete the function below that computes the joint frequency counts for two input sequences. . def pair_counts(sequences_A, sequences_B): &quot;&quot;&quot;Return a dictionary keyed to each unique value in the first sequence list that counts the number of occurrences of the corresponding value from the second sequences list. For example, if sequences_A is tags and sequences_B is the corresponding words, then if 1244 sequences contain the word &quot;time&quot; tagged as a NOUN, then you should return a dictionary such that pair_counts[NOUN][time] == 1244 &quot;&quot;&quot; from itertools import chain pair_count = {} #iterate over both sequences and add them to dictionary for gram, word in tuple(zip(chain(*sequences_A), chain(*sequences_B))): #if key is not in dictionary, initialize its frequency with 1 if gram not in pair_count: pair_count[gram] = {word: 1} else: #update the frequency if key is in dictionary and word is not in dictionary if word not in pair_count[gram]: pair_count[gram].update({word: 1}) #update the frequency if key and word are in dictionary else: pair_count[gram][word] += 1 return pair_count # Calculate C(t_i, w_i) emission_counts= pair_counts(data.Y, data.X) assert len(emission_counts) == 12, &quot;Uh oh. There should be 12 tags in your dictionary.&quot; assert max(emission_counts[&quot;NOUN&quot;], key=emission_counts[&quot;NOUN&quot;].get) == &#39;time&#39;, &quot;Hmmm...&#39;time&#39; is expected to be the most common NOUN.&quot; HTML(&#39;&lt;div class=&quot;alert alert-block alert-success&quot;&gt;Your emission counts look good!&lt;/div&gt;&#39;) . Your emission counts look good! IMPLEMENTATION: Most Frequent Class Tagger . Use the pair_counts() function and the training dataset to find the most frequent class label for each word in the training data, and populate the mfc_table below. The table keys should be words, and the values should be the appropriate tag string. . The MFCTagger class is provided to mock the interface of Pomegranite HMM models so that they can be used interchangeably. . # Create a lookup table mfc_table where mfc_table[word] contains the tag label most frequently assigned to that word from collections import namedtuple FakeState = namedtuple(&quot;FakeState&quot;, &quot;name&quot;) class MFCTagger: # NOTE: You should not need to modify this class or any of its methods missing = FakeState(name=&quot;&lt;MISSING&gt;&quot;) def __init__(self, table): self.table = defaultdict(lambda: MFCTagger.missing) self.table.update({word: FakeState(name=tag) for word, tag in table.items()}) def viterbi(self, seq): &quot;&quot;&quot;This method simplifies predictions by matching the Pomegranate viterbi() interface&quot;&quot;&quot; return 0., list(enumerate([&quot;&lt;start&gt;&quot;] + [self.table[w] for w in seq] + [&quot;&lt;end&gt;&quot;])) mfc_table={} #use pair_counts to create dictionary with words as keys and (tags,frequence) as value word_counts = pair_counts(data.training_set.X, data.training_set.Y) #get the tag with max value by using the max function with value as key for key, value in word_counts.items(): mfc_table[key]=max(value, key=value.get) mfc_model = MFCTagger(mfc_table) # Create a Most Frequent Class tagger instance assert len(mfc_table) == len(data.training_set.vocab), &quot;&quot; assert all(k in data.training_set.vocab for k in mfc_table.keys()), &quot;&quot; assert sum(int(k not in mfc_table) for k in data.testing_set.vocab) == 5521, &quot;&quot; HTML(&#39;&lt;div class=&quot;alert alert-block alert-success&quot;&gt;Your MFC tagger has all the correct words!&lt;/div&gt;&#39;) . Your MFC tagger has all the correct words! Making Predictions with a Model . The helper functions provided below interface with Pomegranate network models &amp; the mocked MFCTagger to take advantage of the missing value functionality in Pomegranate through a simple sequence decoding function. Run these functions, then run the next cell to see some of the predictions made by the MFC tagger. . def replace_unknown(sequence): &quot;&quot;&quot;Return a copy of the input sequence where each unknown word is replaced by the literal string value &#39;nan&#39;. Pomegranate will ignore these values during computation. &quot;&quot;&quot; return [w if w in data.training_set.vocab else &#39;nan&#39; for w in sequence] def simplify_decoding(X, model): &quot;&quot;&quot;X should be a 1-D sequence of observations for the model to predict&quot;&quot;&quot; _, state_path = model.viterbi(replace_unknown(X)) return [state[1].name for state in state_path[1:-1]] # do not show the start/end state predictions . Example Decoding Sequences with MFC Tagger . for key in data.testing_set.keys[:3]: print(&quot;Sentence Key: {} n&quot;.format(key)) print(&quot;Predicted labels: n--&quot;) print(simplify_decoding(data.sentences[key].words, mfc_model)) print() print(&quot;Actual labels: n--&quot;) print(data.sentences[key].tags) print(&quot; n&quot;) . Sentence Key: b100-28144 Predicted labels: -- [&#39;CONJ&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;.&#39;, &#39;NOUN&#39;, &#39;.&#39;, &#39;.&#39;] Actual labels: -- (&#39;CONJ&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;.&#39;, &#39;NOUN&#39;, &#39;.&#39;, &#39;.&#39;) Sentence Key: b100-23146 Predicted labels: -- [&#39;PRON&#39;, &#39;VERB&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;.&#39;, &#39;ADP&#39;, &#39;VERB&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;.&#39;] Actual labels: -- (&#39;PRON&#39;, &#39;VERB&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;.&#39;, &#39;ADP&#39;, &#39;VERB&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;.&#39;) Sentence Key: b100-35462 Predicted labels: -- [&#39;DET&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;ADJ&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;.&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;&lt;MISSING&gt;&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;ADJ&#39;, &#39;.&#39;, &#39;ADJ&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;ADV&#39;, &#39;NOUN&#39;, &#39;.&#39;] Actual labels: -- (&#39;DET&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;ADJ&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;.&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;ADJ&#39;, &#39;.&#39;, &#39;ADJ&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;.&#39;) . Evaluating Model Accuracy . The function below will evaluate the accuracy of the MFC tagger on the collection of all sentences from a text corpus. . def accuracy(X, Y, model): &quot;&quot;&quot;Calculate the prediction accuracy by using the model to decode each sequence in the input X and comparing the prediction with the true labels in Y. The X should be an array whose first dimension is the number of sentences to test, and each element of the array should be an iterable of the words in the sequence. The arrays X and Y should have the exact same shape. X = [(&quot;See&quot;, &quot;Spot&quot;, &quot;run&quot;), (&quot;Run&quot;, &quot;Spot&quot;, &quot;run&quot;, &quot;fast&quot;), ...] Y = [(), (), ...] &quot;&quot;&quot; correct = total_predictions = 0 for observations, actual_tags in zip(X, Y): # The model.viterbi call in simplify_decoding will return None if the HMM # raises an error (for example, if a test sentence contains a word that # is out of vocabulary for the training set). Any exception counts the # full sentence as an error (which makes this a conservative estimate). try: most_likely_tags = simplify_decoding(observations, model) correct += sum(p == t for p, t in zip(most_likely_tags, actual_tags)) except: pass total_predictions += len(observations) return correct / total_predictions . Evaluate the accuracy of the MFC tagger . Run the next cell to evaluate the accuracy of the tagger on the training and test corpus. . mfc_training_acc = accuracy(data.training_set.X, data.training_set.Y, mfc_model) print(&quot;training accuracy mfc_model: {:.2f}%&quot;.format(100 * mfc_training_acc)) mfc_testing_acc = accuracy(data.testing_set.X, data.testing_set.Y, mfc_model) print(&quot;testing accuracy mfc_model: {:.2f}%&quot;.format(100 * mfc_testing_acc)) assert mfc_training_acc &gt;= 0.955, &quot;Uh oh. Your MFC accuracy on the training set doesn&#39;t look right.&quot; assert mfc_testing_acc &gt;= 0.925, &quot;Uh oh. Your MFC accuracy on the testing set doesn&#39;t look right.&quot; HTML(&#39;&lt;div class=&quot;alert alert-block alert-success&quot;&gt;Your MFC tagger accuracy looks correct!&lt;/div&gt;&#39;) . training accuracy mfc_model: 95.72% testing accuracy mfc_model: 93.01% . Your MFC tagger accuracy looks correct! Step 3: Build an HMM tagger . The HMM tagger has one hidden state for each possible tag, and parameterized by two distributions: the emission probabilties giving the conditional probability of observing a given word from each hidden state, and the transition probabilities giving the conditional probability of moving between tags during the sequence. . We will also estimate the starting probability distribution (the probability of each tag being the first tag in a sequence), and the terminal probability distribution (the probability of each tag being the last tag in a sequence). . The maximum likelihood estimate of these distributions can be calculated from the frequency counts as described in the following sections where you&#39;ll implement functions to count the frequencies, and finally build the model. The HMM model will make predictions according to the formula: . $$t_i^n = underset{t_i^n}{ mathrm{argmax}} prod_{i=1}^n P(w_i|t_i) P(t_i|t_{i-1})$$ . IMPLEMENTATION: Unigram Counts . Complete the function below to estimate the co-occurrence frequency of each symbol over all of the input sequences. The unigram probabilities in our HMM model are estimated from the formula below, where N is the total number of samples in the input. (You only need to compute the counts for now.) . $$P(tag_1) = frac{C(tag_1)}{N}$$ . def unigram_counts(sequences): &quot;&quot;&quot;Return a dictionary keyed to each unique value in the input sequence list that counts the number of occurrences of the value in the sequences list. The sequences collection should be a 2-dimensional array. For example, if the tag NOUN appears 275558 times over all the input sequences, then you should return a dictionary such that your_unigram_counts[NOUN] == 275558. &quot;&quot;&quot; return Counter(chain(*sequences)) # TODO: call unigram_counts with a list of tag sequences from the training set tag_unigrams = unigram_counts(data.training_set.Y) assert set(tag_unigrams.keys()) == data.training_set.tagset, &quot;Uh oh. It looks like your tag counts doesn&#39;t include all the tags!&quot; assert min(tag_unigrams, key=tag_unigrams.get) == &#39;X&#39;, &quot;Hmmm...&#39;X&#39; is expected to be the least common class&quot; assert max(tag_unigrams, key=tag_unigrams.get) == &#39;NOUN&#39;, &quot;Hmmm...&#39;NOUN&#39; is expected to be the most common class&quot; HTML(&#39;&lt;div class=&quot;alert alert-block alert-success&quot;&gt;Your tag unigrams look good!&lt;/div&gt;&#39;) . Your tag unigrams look good! IMPLEMENTATION: Bigram Counts . Complete the function below to estimate the co-occurrence frequency of each pair of symbols in each of the input sequences. These counts are used in the HMM model to estimate the bigram probability of two tags from the frequency counts according to the formula: $$P(tag_2|tag_1) = frac{C(tag_2|tag_1)}{C(tag_2)}$$ . import nltk def bigram_counts(sequences): &quot;&quot;&quot;Return a dictionary keyed to each unique PAIR of values in the input sequences list that counts the number of occurrences of pair in the sequences list. The input should be a 2-dimensional array. For example, if the pair of tags (NOUN, VERB) appear 61582 times, then you should return a dictionary such that your_bigram_counts[(NOUN, VERB)] == 61582 &quot;&quot;&quot; return Counter(nltk.bigrams(chain(*sequences))) # TODO: call bigram_counts with a list of tag sequences from the training set tag_bigrams = bigram_counts(data.training_set.Y) assert len(tag_bigrams) == 144, &quot;Uh oh. There should be 144 pairs of bigrams (12 tags x 12 tags)&quot; assert min(tag_bigrams, key=tag_bigrams.get) in [(&#39;X&#39;, &#39;NUM&#39;), (&#39;PRON&#39;, &#39;X&#39;)], &quot;Hmmm...The least common bigram should be one of (&#39;X&#39;, &#39;NUM&#39;) or (&#39;PRON&#39;, &#39;X&#39;).&quot; assert max(tag_bigrams, key=tag_bigrams.get) in [(&#39;DET&#39;, &#39;NOUN&#39;)], &quot;Hmmm...(&#39;DET&#39;, &#39;NOUN&#39;) is expected to be the most common bigram.&quot; HTML(&#39;&lt;div class=&quot;alert alert-block alert-success&quot;&gt;Your tag bigrams look good!&lt;/div&gt;&#39;) . Your tag bigrams look good! IMPLEMENTATION: Sequence Starting Counts . Complete the code below to estimate the bigram probabilities of a sequence starting with each tag. . def starting_counts(sequences): &quot;&quot;&quot;Return a dictionary keyed to each unique value in the input sequences list that counts the number of occurrences where that value is at the beginning of a sequence. For example, if 8093 sequences start with NOUN, then you should return a dictionary such that your_starting_counts[NOUN] == 8093 &quot;&quot;&quot; #Count the frequence of tag if tag appears at first index to count the frequency return Counter([tag[0] for tag in sequences]) # TODO: Calculate the count of each tag starting a sequence tag_starts = starting_counts(data.training_set.Y) assert len(tag_starts) == 12, &quot;Uh oh. There should be 12 tags in your dictionary.&quot; assert min(tag_starts, key=tag_starts.get) == &#39;X&#39;, &quot;Hmmm...&#39;X&#39; is expected to be the least common starting bigram.&quot; assert max(tag_starts, key=tag_starts.get) == &#39;DET&#39;, &quot;Hmmm...&#39;DET&#39; is expected to be the most common starting bigram.&quot; HTML(&#39;&lt;div class=&quot;alert alert-block alert-success&quot;&gt;Your starting tag counts look good!&lt;/div&gt;&#39;) . Your starting tag counts look good! IMPLEMENTATION: Sequence Ending Counts . Complete the function below to estimate the bigram probabilities of a sequence ending with each tag. . def ending_counts(sequences): &quot;&quot;&quot;Return a dictionary keyed to each unique value in the input sequences list that counts the number of occurrences where that value is at the end of a sequence. For example, if 18 sequences end with DET, then you should return a dictionary such that your_starting_counts[DET] == 18 &quot;&quot;&quot; #Count the frequence of tag if tag appears at last index to count the frequency return Counter([tag[-1] for tag in sequences]) # TODO: Calculate the count of each tag ending a sequence tag_ends = ending_counts(data.training_set.Y) assert len(tag_ends) == 12, &quot;Uh oh. There should be 12 tags in your dictionary.&quot; assert min(tag_ends, key=tag_ends.get) in [&#39;X&#39;, &#39;CONJ&#39;], &quot;Hmmm...&#39;X&#39; or &#39;CONJ&#39; should be the least common ending bigram.&quot; assert max(tag_ends, key=tag_ends.get) == &#39;.&#39;, &quot;Hmmm...&#39;.&#39; is expected to be the most common ending bigram.&quot; HTML(&#39;&lt;div class=&quot;alert alert-block alert-success&quot;&gt;Your ending tag counts look good!&lt;/div&gt;&#39;) . Your ending tag counts look good! IMPLEMENTATION: Basic HMM Tagger . Use the tag unigrams and bigrams calculated above to construct a hidden Markov tagger. . Add one state per tag The emission distribution at each state should be estimated with the formula: $P(w|t) = frac{C(t, w)}{C(t)}$ | . | Add an edge from the starting state basic_model.start to each tag The transition probability should be estimated with the formula: $P(t|start) = frac{C(start, t)}{C(start)}$ | . | Add an edge from each tag to the end state basic_model.end The transition probability should be estimated with the formula: $P(end|t) = frac{C(t, end)}{C(t)}$ | . | Add an edge between every pair of tags The transition probability should be estimated with the formula: $P(t_2|t_1) = frac{C(t_1, t_2)}{C(t_1)}$ | . | . basic_model = HiddenMarkovModel(name=&quot;base-hmm-tagger&quot;) # TODO: create states with emission probability distributions P(word | tag) and add to the model # (Hint: you may need to loop &amp; create/add new states) states = dict() for tag in data.tagset: probability = dict() for word, counts in emission_counts[tag].items(): probability[word] = counts / tag_unigrams [tag] emission_probability = DiscreteDistribution(probability) state = State(emission_probability, name = tag) basic_model.add_states(state) states[tag] = state # TODO: add edges between states for the observed transition frequencies P(tag_i | tag_i-1) # (Hint: you may need to loop &amp; add transitions for tag in data.tagset: state = states[tag] basic_model.add_transition(basic_model.start, state, tag_starts[tag] / sum(tag_starts.values())) basic_model.add_transition(state, basic_model.end, tag_ends[tag]/ sum(tag_ends.values())) for tag1 in data.tagset: for tag2 in data.tagset: basic_model.add_transition(states[tag1], states[tag2], tag_bigrams[(tag1,tag2)]/tag_unigrams[tag1]) # finalize the model basic_model.bake() assert all(tag in set(s.name for s in basic_model.states) for tag in data.training_set.tagset), &quot;Every state in your network should use the name of the associated tag, which must be one of the training set tags.&quot; assert basic_model.edge_count() == 168, (&quot;Your network should have an edge from the start node to each state, one edge between every &quot; + &quot;pair of tags (states), and an edge from each state to the end node.&quot;) HTML(&#39;&lt;div class=&quot;alert alert-block alert-success&quot;&gt;Your HMM network topology looks good!&lt;/div&gt;&#39;) . Your HMM network topology looks good! hmm_training_acc = accuracy(data.training_set.X, data.training_set.Y, basic_model) print(&quot;training accuracy basic hmm model: {:.2f}%&quot;.format(100 * hmm_training_acc)) hmm_testing_acc = accuracy(data.testing_set.X, data.testing_set.Y, basic_model) print(&quot;testing accuracy basic hmm model: {:.2f}%&quot;.format(100 * hmm_testing_acc)) assert hmm_training_acc &gt; 0.97, &quot;Uh oh. Your HMM accuracy on the training set doesn&#39;t look right.&quot; assert hmm_testing_acc &gt; 0.955, &quot;Uh oh. Your HMM accuracy on the testing set doesn&#39;t look right.&quot; HTML(&#39;&lt;div class=&quot;alert alert-block alert-success&quot;&gt;Your HMM tagger accuracy looks correct! Congratulations, you &#39;ve finished the project.&lt;/div&gt;&#39;) . training accuracy basic hmm model: 97.53% testing accuracy basic hmm model: 96.16% . Your HMM tagger accuracy looks correct! Congratulations, you&#39;ve finished the project. Example Decoding Sequences with the HMM Tagger . for key in data.testing_set.keys[:3]: print(&quot;Sentence Key: {} n&quot;.format(key)) print(&quot;Predicted labels: n--&quot;) print(simplify_decoding(data.sentences[key].words, basic_model)) print() print(&quot;Actual labels: n--&quot;) print(data.sentences[key].tags) print(&quot; n&quot;) . Sentence Key: b100-28144 Predicted labels: -- [&#39;CONJ&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;.&#39;, &#39;NOUN&#39;, &#39;.&#39;, &#39;.&#39;] Actual labels: -- (&#39;CONJ&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;NOUN&#39;, &#39;NUM&#39;, &#39;.&#39;, &#39;.&#39;, &#39;NOUN&#39;, &#39;.&#39;, &#39;.&#39;) Sentence Key: b100-23146 Predicted labels: -- [&#39;PRON&#39;, &#39;VERB&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;.&#39;, &#39;ADP&#39;, &#39;VERB&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;.&#39;] Actual labels: -- (&#39;PRON&#39;, &#39;VERB&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;.&#39;, &#39;ADP&#39;, &#39;VERB&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;.&#39;) Sentence Key: b100-35462 Predicted labels: -- [&#39;DET&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;ADJ&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;.&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;ADJ&#39;, &#39;.&#39;, &#39;ADJ&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;.&#39;] Actual labels: -- (&#39;DET&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;VERB&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;ADJ&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;.&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;ADP&#39;, &#39;DET&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;ADJ&#39;, &#39;.&#39;, &#39;ADJ&#39;, &#39;.&#39;, &#39;CONJ&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;ADP&#39;, &#39;ADJ&#39;, &#39;NOUN&#39;, &#39;.&#39;) . NOTE: This project is part of NLP Nano degree from Udacity. .",
            "url": "https://ehtasham.github.io/DumbMachine/2020/06/02/Part-of-Speech-Tagging-with-Hidden-Markov-Models.html",
            "relUrl": "/2020/06/02/Part-of-Speech-Tagging-with-Hidden-Markov-Models.html",
            "date": " • Jun 2, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ehtasham.github.io/DumbMachine/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ehtasham.github.io/DumbMachine/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ehtasham.github.io/DumbMachine/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}